local DisplayManager = {}

-- ROBLOX Services
local Players = game.Players

-- Local Variables
local Configurations = require(game.ServerStorage.Configurations)
local Events = game.ReplicatedStorage.Events
local DisplayIntermission = Events.DisplayIntermission
local DisplayTimerInfo = Events.DisplayTimerInfo
local DisplayVictory = Events.DisplayVictory
local DisplayScore = Events.DisplayScore
local SetBlurBlock = Events.SetBlurBlock
local StarterGui = game.StarterGui

-- Initialize
StarterGui.ResetPlayerGuiOnSpawn = false
local MapPurgeProof = game.Workspace:FindFirstChild('MapPurgeProof')
if not MapPurgeProof then
	MapPurgeProof = Instance.new('Folder', game.Workspace)
	MapPurgeProof.Name = 'MapPurgeProof'
end
local BlurContainer = Instance.new('Folder', MapPurgeProof)
BlurContainer.Name = 'BlurContainer'
local BlurBlocks = {}

-- Local Functions
local function CreateBlurBlock(player)
	local block = Instance.new('Part', BlurContainer)
	block.Material = Enum.Material.Neon
	block.Transparency = 0.6
	block.Size = Vector3.new(10,10,1)
	block.CanCollide = false
	block.Locked = true
	block:SetNetworkOwner(player)
	
	BlurBlocks[player] = block
	
	return block
end

local function DestroyBlurBlock(player)
	local block = BlurBlocks[player]
	if block then block:Destroy() end
end

-- Functions
function DisplayManager:StartIntermission(player)
	if player then
		local block = CreateBlurBlock(player)
		SetBlurBlock:FireClient(player, block)
		DisplayIntermission:FireClient(player, true)
	else
		for _, player in ipairs(Players:GetPlayers()) do
			local block = CreateBlurBlock(player)
			SetBlurBlock:FireClient(player, block)
		end
		DisplayIntermission:FireAllClients(true)
	end
end

function DisplayManager:StopIntermission(player)
	if player then
		DisplayIntermission:FireClient(player, false)
		DestroyBlurBlock(player)
	else
		DisplayIntermission:FireAllClients(false)
		for _, player in ipairs(Players:GetPlayers()) do
			DestroyBlurBlock(player)
		end
	end
end

function DisplayManager:UpdateTimerInfo(isIntermission, waitingForPlayers)
	DisplayTimerInfo:FireAllClients(isIntermission, waitingForPlayers)
end

function DisplayManager:DisplayVictory(winningTeam)
	DisplayVictory:FireAllClients(winningTeam)
end

function DisplayManager:UpdateScore(team, score)
	DisplayScore:FireAllClients(team, score)
end

return DisplayManager
